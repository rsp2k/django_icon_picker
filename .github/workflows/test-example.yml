name: Test Django Example Project

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, "3.10", "3.11", "3.12"]
        django-version: [4.2, 5.0, 5.1]
        exclude:
          # Django 5.0+ requires Python 3.10+
          - python-version: 3.9
            django-version: 5.0
          - python-version: 3.9
            django-version: 5.1

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install Django==${{ matrix.django-version }}
        pip install -e ./django-icon-picker/

    - name: Run Django checks
      working-directory: ./django_icon_picker_example
      run: |
        python manage.py check

    - name: Run migrations
      working-directory: ./django_icon_picker_example
      run: |
        python manage.py makemigrations
        python manage.py migrate

    - name: Collect static files
      working-directory: ./django_icon_picker_example
      run: |
        python manage.py collectstatic --noinput

    - name: Run Django tests
      working-directory: ./django_icon_picker_example
      run: |
        python manage.py test

    - name: Test Django development server startup
      working-directory: ./django_icon_picker_example
      run: |
        timeout 10s python manage.py runserver || true
        echo "Development server can start successfully"

  screenshots:
    runs-on: ubuntu-latest
    needs: test
    # Only run screenshots after tests pass

    env:
      BASE_URL: http://127.0.0.1:8000
      SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY || 'django-insecure-screenshots-ci-key-not-for-production-12345' }}
      DEBUG: 'True'
      # Enable detailed Django logging
      DJANGO_LOG_LEVEL: 'DEBUG'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Set up Node.js for Playwright
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install Django==5.1
        pip install -e ./django-icon-picker/
        pip install playwright

    - name: Install Playwright browsers
      run: |
        playwright install --with-deps chromium

    - name: Create Django settings with enhanced logging
      working-directory: ./django_icon_picker_example
      run: |
        cat >> django_icon_picker_example/settings_debug.py << 'EOF'
        # Import all settings from the original settings file
        from .settings import *
        import os

        # Override DEBUG setting
        DEBUG = True

        # Enhanced logging configuration for screenshots
        LOGGING = {
            'version': 1,
            'disable_existing_loggers': False,
            'formatters': {
                'verbose': {
                    'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
                    'style': '{',
                },
                'simple': {
                    'format': '{levelname} {message}',
                    'style': '{',
                },
            },
            'handlers': {
                'file': {
                    'level': 'DEBUG',
                    'class': 'logging.FileHandler',
                    'filename': '../django_debug.log',
                    'formatter': 'verbose',
                },
                'console': {
                    'level': 'DEBUG',
                    'class': 'logging.StreamHandler',
                    'formatter': 'verbose',
                },
            },
            'root': {
                'handlers': ['file', 'console'],
                'level': 'INFO',
            },
            'loggers': {
                'django': {
                    'handlers': ['file', 'console'],
                    'level': 'DEBUG',
                    'propagate': False,
                },
                'django.request': {
                    'handlers': ['file', 'console'],
                    'level': 'DEBUG',
                    'propagate': False,
                },
                'django.server': {
                    'handlers': ['file', 'console'],
                    'level': 'DEBUG',
                    'propagate': False,
                },
                'django_icon_picker': {
                    'handlers': ['file', 'console'],
                    'level': 'DEBUG',
                    'propagate': False,
                },
            },
        }

        # Use environment variables for sensitive settings
        SECRET_KEY = os.environ.get('SECRET_KEY', SECRET_KEY)
        EOF

    - name: Prepare Django project and load test data
      working-directory: ./django_icon_picker_example
      run: |
        echo "=== Running Django migrations ==="
        python manage.py migrate --settings=django_icon_picker_example.settings_debug
        
        echo "=== Collecting static files ==="
        python manage.py collectstatic --noinput --settings=django_icon_picker_example.settings_debug
        
        echo "=== Loading test fixtures for better screenshots ==="
        python manage.py loaddata example/fixtures/comprehensive_test_data.json --settings=django_icon_picker_example.settings_debug
        echo "âœ… Test fixtures loaded successfully - $(python manage.py shell --settings=django_icon_picker_example.settings_debug -c "from example.models import ExampleModel; print(f'{ExampleModel.objects.count()} example models loaded')")"

    - name: Create test superuser
      working-directory: ./django_icon_picker_example
      run: |
        echo "from django.contrib.auth import get_user_model; User = get_user_model(); \
        User.objects.filter(username='screenshots').exists() or \
        User.objects.create_superuser('screenshots', 'test@example.com', 'testpassword123')" \
        | python manage.py shell --settings=django_icon_picker_example.settings_debug
      env:
        DJANGO_SUPERUSER_USERNAME: screenshots
        DJANGO_SUPERUSER_PASSWORD: testpassword123

    - name: Start Django development server with debug logging
      working-directory: ./django_icon_picker_example
      run: |
        # Start Django server in background with debug logging
        echo "Starting Django server with debug logging..."
        python manage.py runserver 0.0.0.0:8000 --settings=django_icon_picker_example.settings_debug > ../django_server.log 2>&1 &
        echo $! > django_server.pid
        echo "Django server started with PID $(cat django_server.pid)"
        
        # Wait for Django to start up
        echo "Waiting for Django server to be ready..."
        for i in {1..30}; do
          if curl -f http://127.0.0.1:8000/admin/login/ > /dev/null 2>&1; then
            echo "Django server is ready!"
            break
          fi
          echo "Attempt $i: Django server not ready yet, waiting..."
          sleep 2
        done
        
        # Final check
        if ! curl -f http://127.0.0.1:8000/admin/login/ > /dev/null 2>&1; then
          echo "ERROR: Django server failed to start properly"
          echo "=== Django Server Log ==="
          cat ../django_server.log || echo "No server log found"
          echo "=== Django Debug Log ==="
          cat ../django_debug.log || echo "No debug log found"
          cat django_server.pid
          ps aux | grep manage.py
          exit 1
        fi

    - name: Create enhanced screenshot script with meaningful video names
      run: |
        cat > take_screenshots_with_video.py << 'EOF'
        #!/usr/bin/env python3
        import os
        import sys
        import logging
        import time
        from datetime import datetime
        from playwright.sync_api import sync_playwright

        # Set up logging for the screenshot script
        logging.basicConfig(
            level=logging.DEBUG,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler('screenshot_process.log'),
                logging.StreamHandler()
            ]
        )

        logger = logging.getLogger('screenshot_script')

        # Define the base URL for your running Django project
        BASE_URL = os.environ.get('BASE_URL', 'http://127.0.0.1:8000')

        # List of URLs to screenshot (relative to BASE_URL)
        URLS_TO_SCREENSHOT = [
            '/',  # Root URL (might show a 404 or redirect, but useful for testing)
            '/admin/',  # Django admin login page
            '/admin/example/',  # Example app admin
            '/admin/example/examplemodel/',  # Example model admin list
            '/admin/example/examplemodel/add/',  # Add new example model (should show icon picker)
        ]

        OUTPUT_DIR = 'screenshots'
        VIDEO_DIR = 'videos'

        def login_to_admin_if_needed(page, username, password):
            """
            Logs into the Django admin if credentials are provided.
            """
            if username and password:
                logger.info("Attempting to log into Django admin...")
                try:
                    page.goto(f"{BASE_URL}/admin/login/")
                    
                    # Wait for login form to be visible
                    page.wait_for_selector('input[name="username"]', timeout=10000)
                    
                    page.fill('input[name="username"]', username)
                    page.fill('input[name="password"]', password)
                    page.click('input[type="submit"]')

                    # Wait for successful login - look for admin index page elements
                    try:
                        page.wait_for_selector('h1:has-text("Django administration")', timeout=10000)
                        logger.info("Admin login successful!")
                        return True
                    except:
                        # If we don't see the admin header, check if we're still on login page
                        if 'login' in page.url:
                            logger.error("Login failed - still on login page")
                            return False
                        else:
                            logger.info("Login appears successful (redirected away from login)")
                            return True
                            
                except Exception as e:
                    logger.error(f"Admin login failed: {e}")
                    return False
            return False

        def take_screenshot_with_retry(page, url_path, filename, retries=2):
            """
            Take a screenshot with retry logic for better reliability.
            """
            full_url = f"{BASE_URL}{url_path}"
            
            for attempt in range(retries + 1):
                try:
                    logger.info(f"Navigating to {full_url} (attempt {attempt + 1})...")
                    
                    # Navigate to the URL with a longer timeout
                    page.goto(full_url, wait_until='domcontentloaded', timeout=30000)
                    
                    # Wait a bit for any dynamic content to load
                    page.wait_for_timeout(2000)
                    
                    # For admin pages, wait for Django admin CSS to load for better screenshots
                    if '/admin/' in url_path:
                        try:
                            # Wait for admin styles to load
                            page.wait_for_selector('.breadcrumbs, #header, .module', timeout=5000)
                        except:
                            pass  # Continue even if admin elements don't load
                    
                    # Take the screenshot
                    page.screenshot(path=filename, full_page=True)
                    logger.info(f"Screenshot saved: {filename}")
                    return True
                    
                except Exception as e:
                    logger.error(f"Attempt {attempt + 1} failed for {full_url}: {e}")
                    if attempt < retries:
                        logger.info("Retrying...")
                        page.wait_for_timeout(1000)  # Wait before retry
                    else:
                        logger.error(f"Failed to screenshot {full_url} after {retries + 1} attempts")
                        
                        # Take a screenshot of whatever page we're on for debugging
                        try:
                            debug_filename = filename.replace('.png', '_error.png')
                            page.screenshot(path=debug_filename)
                            logger.info(f"Error screenshot saved: {debug_filename}")
                        except:
                            pass
                            
            return False

        def interact_with_icon_picker(page):
            """
            Interact with the icon picker field and demonstrate its functionality.
            """
            try:
                logger.info("Looking for icon picker field...")
                
                # Wait for form to load
                page.wait_for_selector('.form-row', timeout=10000)
                
                # Look for the icon field specifically
                icon_field = page.query_selector('input[name="icon"]')
                if not icon_field:
                    logger.warning("Icon field not found by name, trying by ID...")
                    icon_field = page.query_selector('input[id*="icon"]')

                if icon_field:
                    logger.info("Found icon field, attempting to interact with icon picker...")
                    
                    # Click on the icon field to potentially open the picker
                    icon_field.click()
                    page.wait_for_timeout(1500)  # Wait for picker to appear
                    
                    # Look for icon picker modal or interface
                    picker_selectors = [
                        '.icon-picker-modal',
                        '.icon-picker',
                        '[class*="icon-picker"]',
                        '.modal',
                        '[role="dialog"]'
                    ]
                    
                    picker_found = False
                    for selector in picker_selectors:
                        if page.query_selector(selector):
                            logger.info(f"Icon picker interface found with selector: {selector}")
                            picker_found = True
                            break
                    
                    if picker_found:
                        # Try to select an icon from the picker
                        # Look for icon buttons or selectable icons
                        icon_buttons = page.query_selector_all('.icon-option, .icon-button, [data-icon], .emoji, [class*="icon-"]')
                        
                        if icon_buttons and len(icon_buttons) > 0:
                            # Click on the first available icon
                            icon_buttons[0].click()
                            logger.info("Selected an icon from the picker")
                            page.wait_for_timeout(1000)
                            
                            # Look for and click any confirm/ok button
                            confirm_buttons = page.query_selector_all('button:has-text("OK"), button:has-text("Select"), button:has-text("Choose"), .btn-primary')
                            if confirm_buttons:
                                confirm_buttons[0].click()
                                logger.info("Confirmed icon selection")
                                page.wait_for_timeout(500)
                        else:
                            logger.warning("No selectable icons found in picker")
                    else:
                        # If no picker UI found, try to fill the field directly with a sample icon
                        logger.info("No picker UI found, filling field directly with sample icon...")
                        icon_field.fill('material-symbols:star')
                        page.wait_for_timeout(500)
                        
                    # Check if the field now has a value
                    field_value = icon_field.get_attribute('value') or ''
                    if field_value:
                        logger.info(f"Icon field now contains: {field_value}")
                    else:
                        logger.warning("Icon field appears to be empty after interaction")
                        
                else:
                    logger.warning("Could not find icon field on the page")
                    
            except Exception as e:
                logger.error(f"Error interacting with icon picker: {e}")

        def fill_form_fields(page):
            """
            Fill in other form fields for a complete demo.
            """
            try:
                logger.info("Filling form fields...")
                
                # Fill name field
                name_selectors = ['input[name="name"]', 'input[name="title"]', 'input[id*="name"]', 'input[id*="title"]']
                for selector in name_selectors:
                    name_field = page.query_selector(selector)
                    if name_field:
                        name_field.fill("Screenshot Demo - Icon Picker Test")
                        logger.info(f"Filled name field using selector: {selector}")
                        break
                
                # Interact with icon picker
                interact_with_icon_picker(page)
                
                # Wait a moment for any UI updates
                page.wait_for_timeout(1000)
                
            except Exception as e:
                logger.warning(f"Error filling form fields: {e}")

        def create_sample_model_with_icons(page):
            """
            Navigate to add page and demonstrate icon picker functionality.
            """
            try:
                logger.info("Demonstrating icon picker on add page...")
                
                # Navigate to the add page
                page.goto(f"{BASE_URL}/admin/example/examplemodel/add/")
                page.wait_for_selector('.form-row, input, textarea', timeout=10000)
                
                # Fill in the form to demonstrate the icon picker
                fill_form_fields(page)
                
                logger.info("Form interaction completed")
                    
            except Exception as e:
                logger.warning(f"Could not demonstrate icon picker: {e}")

        def generate_meaningful_video_name(admin_logged_in, screenshot_results, timestamp):
            """
            Generate a meaningful video filename based on test execution.
            """
            # Base components
            components = ["django_icon_picker"]
            
            # Add authentication status
            if admin_logged_in:
                components.append("full_admin_demo")
            else:
                components.append("public_pages_only")
            
            # Add page count
            successful_screenshots = sum(1 for r in screenshot_results if r['success'])
            components.append(f"{successful_screenshots}_pages")
            
            # Add special features tested
            features = []
            if admin_logged_in:
                features.append("login")
                # Check if we tested the add page (icon picker demo)
                add_page_tested = any('/add/' in r['url'] for r in screenshot_results if r['success'])
                if add_page_tested:
                    features.append("icon_picker_interaction")
            
            if features:
                components.append("_".join(features))
            
            # Add timestamp
            components.append(timestamp)
            
            return "_".join(components) + ".webm"

        def main():
            if not os.path.exists(OUTPUT_DIR):
                os.makedirs(OUTPUT_DIR)
            if not os.path.exists(VIDEO_DIR):
                os.makedirs(VIDEO_DIR)

            # Get credentials from environment variables
            DJANGO_SUPERUSER_USERNAME = os.environ.get('DJANGO_SUPERUSER_USERNAME')
            DJANGO_SUPERUSER_PASSWORD = os.environ.get('DJANGO_SUPERUSER_PASSWORD')

            # Determine what features we can test
            has_credentials = bool(DJANGO_SUPERUSER_USERNAME and DJANGO_SUPERUSER_PASSWORD)
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')

            logger.info(f"Starting screenshot capture with video recording at {datetime.now()}")
            logger.info(f"Base URL: {BASE_URL}")
            logger.info(f"Output directory: {OUTPUT_DIR}")
            logger.info(f"Video directory: {VIDEO_DIR}")
            logger.info(f"Admin credentials available: {has_credentials}")

            with sync_playwright() as p:
                # Launch browser
                browser = p.chromium.launch(
                    args=['--no-sandbox', '--disable-dev-shm-usage']  # Useful for CI environments
                )
                
                # Create browser context with video recording enabled
                context = browser.new_context(
                    viewport={'width': 1920, 'height': 1080},
                    record_video_dir=VIDEO_DIR,
                    record_video_size={'width': 1920, 'height': 1080}
                )
                
                # Create a new page from the context
                page = context.new_page()
                
                # Perform admin login if credentials are provided
                admin_logged_in = login_to_admin_if_needed(page, DJANGO_SUPERUSER_USERNAME, DJANGO_SUPERUSER_PASSWORD)

                screenshot_results = []
                
                for url_path in URLS_TO_SCREENSHOT:
                    # Create a safe filename from the URL path
                    safe_filename = url_path.replace('/', '_').strip('_') or 'root'
                    filename = os.path.join(OUTPUT_DIR, f"{safe_filename}.png")
                    
                    # Skip admin pages if we couldn't log in
                    if '/admin/' in url_path and url_path != '/admin/' and not admin_logged_in:
                        logger.info(f"Skipping {url_path} - admin login required but not available")
                        continue
                    
                    # Special handling for the add page to demonstrate icon picker
                    if url_path.endswith('/add/') and admin_logged_in:
                        create_sample_model_with_icons(page)
                    
                    success = take_screenshot_with_retry(page, url_path, filename)
                    screenshot_results.append({
                        'url': url_path,
                        'filename': filename,
                        'success': success
                    })

                # Close the page to finalize video recording
                page.close()
                
                # Close the context to save the video
                context.close()
                
                # Close the browser
                browser.close()
                
                # Wait a moment for video files to be written
                time.sleep(2)
                
                # List and rename video files with meaningful names
                logger.info("Processing recorded videos...")
                if os.path.exists(VIDEO_DIR):
                    video_files = [f for f in os.listdir(VIDEO_DIR) if f.endswith('.webm')]
                    if video_files:
                        # Generate meaningful filename based on test content
                        meaningful_name = generate_meaningful_video_name(admin_logged_in, screenshot_results, timestamp)
                        
                        # Rename the video file
                        original_video = os.path.join(VIDEO_DIR, video_files[0])
                        new_video_path = os.path.join(VIDEO_DIR, meaningful_name)
                        try:
                            os.rename(original_video, new_video_path)
                            logger.info(f"Video saved as: {meaningful_name}")
                            
                            # Log video details for summary
                            video_features = []
                            if admin_logged_in:
                                video_features.append("admin authentication")
                                if any('/add/' in r['url'] for r in screenshot_results if r['success']):
                                    video_features.append("icon picker interaction")
                            
                            video_description = f"Complete browser session recording"
                            if video_features:
                                video_description += f" including: {', '.join(video_features)}"
                            
                            logger.info(f"Video content: {video_description}")
                            logger.info(f"Video covers {len([r for r in screenshot_results if r['success']])} pages")
                            
                        except Exception as e:
                            logger.error(f"Failed to rename video: {e}")
                    else:
                        logger.warning("No video files found after recording")
                else:
                    logger.warning("Video directory not found")
                
                # Print summary
                logger.info("\n" + "="*50)
                logger.info("SCREENSHOT AND VIDEO SUMMARY")
                logger.info("="*50)
                successful = sum(1 for r in screenshot_results if r['success'])
                total = len(screenshot_results)
                logger.info(f"Successfully captured: {successful}/{total} screenshots")
                
                # Log video information
                video_files = [f for f in os.listdir(VIDEO_DIR) if f.endswith('.webm')] if os.path.exists(VIDEO_DIR) else []
                if video_files:
                    logger.info(f"Video recorded: {len(video_files)} file(s)")
                    for video_file in video_files:
                        logger.info(f"ðŸŽ¬ Video: {video_file}")
                        # Extract meaningful info from filename
                        if "full_admin_demo" in video_file:
                            logger.info("   â†³ Includes: Admin login + icon picker demo")
                        elif "public_pages_only" in video_file:
                            logger.info("   â†³ Includes: Public pages only (no admin access)")
                        if "icon_picker_interaction" in video_file:
                            logger.info("   â†³ Features: Icon picker field interaction")
                else:
                    logger.warning("No video files were created")
                
                for result in screenshot_results:
                    status = "âœ“" if result['success'] else "âœ—"
                    logger.info(f"{status} {result['url']} -> {result['filename']}")
                
                if successful == 0:
                    logger.error("\nWARNING: No screenshots were captured successfully!")
                    sys.exit(1)
                elif successful < total:
                    logger.warning(f"\nWARNING: {total - successful} screenshots failed")
                else:
                    logger.info(f"\nðŸŽ‰ All screenshots and video captured successfully!")

        if __name__ == '__main__':
            main()
        EOF

    - name: Take screenshots and record video with meaningful naming
      run: |
        echo "=== Starting screenshot capture and video recording with meaningful naming ==="
        python take_screenshots_with_video.py
      env:
        DJANGO_SUPERUSER_USERNAME: screenshots
        DJANGO_SUPERUSER_PASSWORD: testpassword123
        BASE_URL: http://127.0.0.1:8000

    - name: Collect all log files
      if: always()
      run: |
        echo "=== Collecting log files ==="
        mkdir -p logs
        
        # Copy Django debug log
        if [ -f django_debug.log ]; then
          cp django_debug.log logs/django_debug.log
          echo "Django debug log copied"
        else
          echo "No Django debug log found"
        fi
        
        # Copy Django server log
        if [ -f django_server.log ]; then
          cp django_server.log logs/django_server.log
          echo "Django server log copied"
        else
          echo "No Django server log found"
        fi
        
        # Copy screenshot process log
        if [ -f screenshot_process.log ]; then
          cp screenshot_process.log logs/screenshot_process.log
          echo "Screenshot process log copied"
        else
          echo "No screenshot process log found"
        fi
        
        # Create a summary log with video information
        cat > logs/summary.log << EOF
        Screenshot and Video Capture Summary
        ====================================
        Timestamp: $(date)
        Django Settings: django_icon_picker_example.settings_debug
        Base URL: $BASE_URL
        Debug Mode: $DEBUG
        Django Log Level: $DJANGO_LOG_LEVEL
        
        Test Data: 40 diverse icon examples loaded from fixtures
        Enhanced Features: Icon picker interaction, form filling, and meaningful video naming
        
        Files Generated:
        $(find screenshots -name "*.png" 2>/dev/null | sort || echo "No screenshots found")
        $(find videos -name "*.webm" 2>/dev/null | sort || echo "No videos found")
        
        Video Naming Convention:
        - django_icon_picker_[demo_type]_[page_count]_pages_[features]_[timestamp].webm
        - demo_type: full_admin_demo | public_pages_only  
        - features: login_icon_picker_interaction (when applicable)
        
        Log Files:
        $(find logs -name "*.log" 2>/dev/null | sort || echo "No log files found")
        EOF
        
        echo "All log files collected in logs/ directory"
        ls -la logs/ || echo "No logs directory found"

    - name: Upload screenshots as artifact
      uses: actions/upload-artifact@v4
      if: always()  # Upload even if screenshot step fails
      with:
        name: django-icon-picker-screenshots
        path: screenshots/
        retention-days: 30

    - name: Upload videos as artifact
      uses: actions/upload-artifact@v4
      if: always()  # Upload even if previous steps fail
      with:
        name: django-icon-picker-videos
        path: videos/
        retention-days: 30

    - name: Upload debug logs as artifact
      uses: actions/upload-artifact@v4
      if: always()  # Upload even if previous steps fail
      with:
        name: django-debug-logs
        path: logs/
        retention-days: 30

    - name: Display log summary with video details
      if: always()
      run: |
        echo "=== LOG SUMMARY ==="
        if [ -f logs/summary.log ]; then
         cat logs/summary.log
        fi
        
        echo ""
        echo "=== SCREENSHOT FILES ==="
        if [ -d screenshots ]; then
          ls -la screenshots/
        else
          echo "No screenshots directory found"
        fi
        
        echo ""
        echo "=== VIDEO FILES ==="
        if [ -d videos ]; then
          echo "Videos with meaningful names:"
          ls -la videos/
          echo ""
          echo "Video naming explanation:"
          echo "- Files include test scope (full_admin_demo vs public_pages_only)"
          echo "- Page count indicates coverage (e.g., 5_pages)"
          echo "- Features tested (login, icon_picker_interaction)"
          echo "- Timestamp for uniqueness"
        else
          echo "No videos directory found"
        fi
        
        echo ""
        echo "=== LOG FILES ==="
        if [ -d logs ]; then
          ls -la logs/
        else
          echo "No logs directory found"
        fi

    - name: Stop Django server
      if: always()
      working-directory: ./django_icon_picker_example
      run: |
        if [ -f django_server.pid ]; then
          kill $(cat django_server.pid) || true
          rm django_server.pid
        fi
